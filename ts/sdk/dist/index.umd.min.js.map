{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/Transmuter.client.ts","../src/contracts/index.ts"],"sourcesContent":["/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { StdFee } from \"@cosmjs/amino\";\nimport { ExecuteMsg, Uint128, Coin, InstantiateMsg, QueryMsg, Decimal, AdminResponse, CalcInAmtGivenOutResponse, CalcOutAmtGivenInResponse, GetSharesResponse, GetSwapFeeResponse, GetTotalPoolLiquidityResponse, GetTotalSharesResponse, IsActiveResponse, PoolResponse, TransmuterPool, SharesResponse, SpotPriceResponse } from \"./Transmuter.types\";\nexport interface TransmuterReadOnlyInterface {\n  contractAddress: string;\n  getShares: ({\n    address\n  }: {\n    address: string;\n  }) => Promise<GetSharesResponse>;\n  getSwapFee: () => Promise<GetSwapFeeResponse>;\n  isActive: () => Promise<IsActiveResponse>;\n  getTotalShares: () => Promise<GetTotalSharesResponse>;\n  getTotalPoolLiquidity: () => Promise<GetTotalPoolLiquidityResponse>;\n  spotPrice: ({\n    baseAssetDenom,\n    quoteAssetDenom\n  }: {\n    baseAssetDenom: string;\n    quoteAssetDenom: string;\n  }) => Promise<SpotPriceResponse>;\n  calcOutAmtGivenIn: ({\n    swapFee,\n    tokenIn,\n    tokenOutDenom\n  }: {\n    swapFee: Decimal;\n    tokenIn: Coin;\n    tokenOutDenom: string;\n  }) => Promise<CalcOutAmtGivenInResponse>;\n  calcInAmtGivenOut: ({\n    swapFee,\n    tokenInDenom,\n    tokenOut\n  }: {\n    swapFee: Decimal;\n    tokenInDenom: string;\n    tokenOut: Coin;\n  }) => Promise<CalcInAmtGivenOutResponse>;\n}\nexport class TransmuterQueryClient implements TransmuterReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getShares = this.getShares.bind(this);\n    this.getSwapFee = this.getSwapFee.bind(this);\n    this.isActive = this.isActive.bind(this);\n    this.getTotalShares = this.getTotalShares.bind(this);\n    this.getTotalPoolLiquidity = this.getTotalPoolLiquidity.bind(this);\n    this.spotPrice = this.spotPrice.bind(this);\n    this.calcOutAmtGivenIn = this.calcOutAmtGivenIn.bind(this);\n    this.calcInAmtGivenOut = this.calcInAmtGivenOut.bind(this);\n  }\n\n  getShares = async ({\n    address\n  }: {\n    address: string;\n  }): Promise<GetSharesResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_shares: {\n        address\n      }\n    });\n  };\n  getSwapFee = async (): Promise<GetSwapFeeResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_swap_fee: {}\n    });\n  };\n  isActive = async (): Promise<IsActiveResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      is_active: {}\n    });\n  };\n  getTotalShares = async (): Promise<GetTotalSharesResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_total_shares: {}\n    });\n  };\n  getTotalPoolLiquidity = async (): Promise<GetTotalPoolLiquidityResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_total_pool_liquidity: {}\n    });\n  };\n  spotPrice = async ({\n    baseAssetDenom,\n    quoteAssetDenom\n  }: {\n    baseAssetDenom: string;\n    quoteAssetDenom: string;\n  }): Promise<SpotPriceResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      spot_price: {\n        base_asset_denom: baseAssetDenom,\n        quote_asset_denom: quoteAssetDenom\n      }\n    });\n  };\n  calcOutAmtGivenIn = async ({\n    swapFee,\n    tokenIn,\n    tokenOutDenom\n  }: {\n    swapFee: Decimal;\n    tokenIn: Coin;\n    tokenOutDenom: string;\n  }): Promise<CalcOutAmtGivenInResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      calc_out_amt_given_in: {\n        swap_fee: swapFee,\n        token_in: tokenIn,\n        token_out_denom: tokenOutDenom\n      }\n    });\n  };\n  calcInAmtGivenOut = async ({\n    swapFee,\n    tokenInDenom,\n    tokenOut\n  }: {\n    swapFee: Decimal;\n    tokenInDenom: string;\n    tokenOut: Coin;\n  }): Promise<CalcInAmtGivenOutResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      calc_in_amt_given_out: {\n        swap_fee: swapFee,\n        token_in_denom: tokenInDenom,\n        token_out: tokenOut\n      }\n    });\n  };\n}\nexport interface TransmuterInterface extends TransmuterReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  joinPool: (fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  exitPool: ({\n    tokensOut\n  }: {\n    tokensOut: Coin[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  swapExactAmountIn: ({\n    tokenIn,\n    tokenOutDenom,\n    tokenOutMinAmount\n  }: {\n    tokenIn: Coin;\n    tokenOutDenom: string;\n    tokenOutMinAmount: Uint128;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  swapExactAmountOut: ({\n    tokenInDenom,\n    tokenInMaxAmount,\n    tokenOut\n  }: {\n    tokenInDenom: string;\n    tokenInMaxAmount: Uint128;\n    tokenOut: Coin;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class TransmuterClient extends TransmuterQueryClient implements TransmuterInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.joinPool = this.joinPool.bind(this);\n    this.exitPool = this.exitPool.bind(this);\n    this.swapExactAmountIn = this.swapExactAmountIn.bind(this);\n    this.swapExactAmountOut = this.swapExactAmountOut.bind(this);\n  }\n\n  joinPool = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      join_pool: {}\n    }, fee, memo, funds);\n  };\n  exitPool = async ({\n    tokensOut\n  }: {\n    tokensOut: Coin[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      exit_pool: {\n        tokens_out: tokensOut\n      }\n    }, fee, memo, funds);\n  };\n  swapExactAmountIn = async ({\n    tokenIn,\n    tokenOutDenom,\n    tokenOutMinAmount\n  }: {\n    tokenIn: Coin;\n    tokenOutDenom: string;\n    tokenOutMinAmount: Uint128;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      swap_exact_amount_in: {\n        token_in: tokenIn,\n        token_out_denom: tokenOutDenom,\n        token_out_min_amount: tokenOutMinAmount\n      }\n    }, fee, memo, funds);\n  };\n  swapExactAmountOut = async ({\n    tokenInDenom,\n    tokenInMaxAmount,\n    tokenOut\n  }: {\n    tokenInDenom: string;\n    tokenInMaxAmount: Uint128;\n    tokenOut: Coin;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      swap_exact_amount_out: {\n        token_in_denom: tokenInDenom,\n        token_in_max_amount: tokenInMaxAmount,\n        token_out: tokenOut\n      }\n    }, fee, memo, funds);\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport * as _0 from \"./Transmuter.types\";\nimport * as _1 from \"./Transmuter.client\";\nexport namespace contracts {\n  export const Transmuter = { ..._0,\n    ..._1\n  };\n}"],"names":["TransmuterQueryClient","client","contractAddress","_this","this","getShares","_a","address","queryContractSmart","get_shares","getSwapFee","__awaiter","get_swap_fee","isActive","is_active","getTotalShares","get_total_shares","getTotalPoolLiquidity","get_total_pool_liquidity","spotPrice","baseAssetDenom","quoteAssetDenom","spot_price","base_asset_denom","quote_asset_denom","calcOutAmtGivenIn","swapFee","tokenIn","tokenOutDenom","calc_out_amt_given_in","swap_fee","token_in","token_out_denom","calcInAmtGivenOut","tokenInDenom","tokenOut","calc_in_amt_given_out","token_in_denom","token_out","bind","TransmuterClient","_super","sender","call","joinPool","fee","memo","funds","execute","join_pool","exitPool","tokensOut","exit_pool","tokens_out","_b","swapExactAmountIn","tokenOutMinAmount","swap_exact_amount_in","token_out_min_amount","swapExactAmountOut","tokenInMaxAmount","swap_exact_amount_out","token_in_max_amount","__extends","exports","contracts","Transmuter","__assign","_0","_1"],"mappings":"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"}