{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/Transmuter.client.ts","../src/contracts/index.ts"],"sourcesContent":["/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { StdFee } from \"@cosmjs/amino\";\nimport { ExecuteMsg, Uint128, Coin, InstantiateMsg, QueryMsg, Decimal, CalcInAmtGivenOutResponse, CalcOutAmtGivenInResponse, Addr, GetAdminCandidateResponse, GetAdminResponse, GetShareDenomResponse, GetSharesResponse, GetSwapFeeResponse, GetTotalPoolLiquidityResponse, GetTotalSharesResponse, IsActiveResponse, SpotPriceResponse } from \"./Transmuter.types\";\nexport interface TransmuterReadOnlyInterface {\n  contractAddress: string;\n  getShares: ({\n    address\n  }: {\n    address: string;\n  }) => Promise<GetSharesResponse>;\n  getShareDenom: () => Promise<GetShareDenomResponse>;\n  getSwapFee: () => Promise<GetSwapFeeResponse>;\n  isActive: () => Promise<IsActiveResponse>;\n  getTotalShares: () => Promise<GetTotalSharesResponse>;\n  getTotalPoolLiquidity: () => Promise<GetTotalPoolLiquidityResponse>;\n  spotPrice: ({\n    baseAssetDenom,\n    quoteAssetDenom\n  }: {\n    baseAssetDenom: string;\n    quoteAssetDenom: string;\n  }) => Promise<SpotPriceResponse>;\n  calcOutAmtGivenIn: ({\n    swapFee,\n    tokenIn,\n    tokenOutDenom\n  }: {\n    swapFee: Decimal;\n    tokenIn: Coin;\n    tokenOutDenom: string;\n  }) => Promise<CalcOutAmtGivenInResponse>;\n  calcInAmtGivenOut: ({\n    swapFee,\n    tokenInDenom,\n    tokenOut\n  }: {\n    swapFee: Decimal;\n    tokenInDenom: string;\n    tokenOut: Coin;\n  }) => Promise<CalcInAmtGivenOutResponse>;\n  getAdmin: () => Promise<GetAdminResponse>;\n  getAdminCandidate: () => Promise<GetAdminCandidateResponse>;\n}\nexport class TransmuterQueryClient implements TransmuterReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getShares = this.getShares.bind(this);\n    this.getShareDenom = this.getShareDenom.bind(this);\n    this.getSwapFee = this.getSwapFee.bind(this);\n    this.isActive = this.isActive.bind(this);\n    this.getTotalShares = this.getTotalShares.bind(this);\n    this.getTotalPoolLiquidity = this.getTotalPoolLiquidity.bind(this);\n    this.spotPrice = this.spotPrice.bind(this);\n    this.calcOutAmtGivenIn = this.calcOutAmtGivenIn.bind(this);\n    this.calcInAmtGivenOut = this.calcInAmtGivenOut.bind(this);\n    this.getAdmin = this.getAdmin.bind(this);\n    this.getAdminCandidate = this.getAdminCandidate.bind(this);\n  }\n\n  getShares = async ({\n    address\n  }: {\n    address: string;\n  }): Promise<GetSharesResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_shares: {\n        address\n      }\n    });\n  };\n  getShareDenom = async (): Promise<GetShareDenomResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_share_denom: {}\n    });\n  };\n  getSwapFee = async (): Promise<GetSwapFeeResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_swap_fee: {}\n    });\n  };\n  isActive = async (): Promise<IsActiveResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      is_active: {}\n    });\n  };\n  getTotalShares = async (): Promise<GetTotalSharesResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_total_shares: {}\n    });\n  };\n  getTotalPoolLiquidity = async (): Promise<GetTotalPoolLiquidityResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_total_pool_liquidity: {}\n    });\n  };\n  spotPrice = async ({\n    baseAssetDenom,\n    quoteAssetDenom\n  }: {\n    baseAssetDenom: string;\n    quoteAssetDenom: string;\n  }): Promise<SpotPriceResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      spot_price: {\n        base_asset_denom: baseAssetDenom,\n        quote_asset_denom: quoteAssetDenom\n      }\n    });\n  };\n  calcOutAmtGivenIn = async ({\n    swapFee,\n    tokenIn,\n    tokenOutDenom\n  }: {\n    swapFee: Decimal;\n    tokenIn: Coin;\n    tokenOutDenom: string;\n  }): Promise<CalcOutAmtGivenInResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      calc_out_amt_given_in: {\n        swap_fee: swapFee,\n        token_in: tokenIn,\n        token_out_denom: tokenOutDenom\n      }\n    });\n  };\n  calcInAmtGivenOut = async ({\n    swapFee,\n    tokenInDenom,\n    tokenOut\n  }: {\n    swapFee: Decimal;\n    tokenInDenom: string;\n    tokenOut: Coin;\n  }): Promise<CalcInAmtGivenOutResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      calc_in_amt_given_out: {\n        swap_fee: swapFee,\n        token_in_denom: tokenInDenom,\n        token_out: tokenOut\n      }\n    });\n  };\n  getAdmin = async (): Promise<GetAdminResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_admin: {}\n    });\n  };\n  getAdminCandidate = async (): Promise<GetAdminCandidateResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_admin_candidate: {}\n    });\n  };\n}\nexport interface TransmuterInterface extends TransmuterReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  setActiveStatus: ({\n    active\n  }: {\n    active: boolean;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  joinPool: (fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  exitPool: ({\n    tokensOut\n  }: {\n    tokensOut: Coin[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  transferAdmin: ({\n    candidate\n  }: {\n    candidate: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  claimAdmin: (fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class TransmuterClient extends TransmuterQueryClient implements TransmuterInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.setActiveStatus = this.setActiveStatus.bind(this);\n    this.joinPool = this.joinPool.bind(this);\n    this.exitPool = this.exitPool.bind(this);\n    this.transferAdmin = this.transferAdmin.bind(this);\n    this.claimAdmin = this.claimAdmin.bind(this);\n  }\n\n  setActiveStatus = async ({\n    active\n  }: {\n    active: boolean;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      set_active_status: {\n        active\n      }\n    }, fee, memo, funds);\n  };\n  joinPool = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      join_pool: {}\n    }, fee, memo, funds);\n  };\n  exitPool = async ({\n    tokensOut\n  }: {\n    tokensOut: Coin[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      exit_pool: {\n        tokens_out: tokensOut\n      }\n    }, fee, memo, funds);\n  };\n  transferAdmin = async ({\n    candidate\n  }: {\n    candidate: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      transfer_admin: {\n        candidate\n      }\n    }, fee, memo, funds);\n  };\n  claimAdmin = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      claim_admin: {}\n    }, fee, memo, funds);\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport * as _0 from \"./Transmuter.types\";\nimport * as _1 from \"./Transmuter.client\";\nexport namespace contracts {\n  export const Transmuter = { ..._0,\n    ..._1\n  };\n}"],"names":["TransmuterQueryClient","client","contractAddress","_this","this","getShares","_a","address","queryContractSmart","get_shares","getShareDenom","__awaiter","get_share_denom","getSwapFee","get_swap_fee","isActive","is_active","getTotalShares","get_total_shares","getTotalPoolLiquidity","get_total_pool_liquidity","spotPrice","baseAssetDenom","quoteAssetDenom","spot_price","base_asset_denom","quote_asset_denom","calcOutAmtGivenIn","swapFee","tokenIn","tokenOutDenom","calc_out_amt_given_in","swap_fee","token_in","token_out_denom","calcInAmtGivenOut","tokenInDenom","tokenOut","calc_in_amt_given_out","token_in_denom","token_out","getAdmin","get_admin","getAdminCandidate","get_admin_candidate","bind","TransmuterClient","_super","sender","call","setActiveStatus","fee","memo","funds","active","execute","set_active_status","_b","joinPool","join_pool","exitPool","tokensOut","exit_pool","tokens_out","transferAdmin","candidate","transfer_admin","claimAdmin","claim_admin","__extends","exports","contracts","Transmuter","__assign","_0","_1"],"mappings":"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"}