{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/Transmuter.client.ts","../src/contracts/index.ts"],"sourcesContent":["/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { StdFee } from \"@cosmjs/amino\";\nimport { ExecuteMsg, Uint128, Coin, InstantiateMsg, QueryMsg, AdminResponse, PoolResponse, TransmuterPool, SharesResponse } from \"./Transmuter.types\";\nexport interface TransmuterReadOnlyInterface {\n  contractAddress: string;\n  pool: () => Promise<PoolResponse>;\n  shares: ({\n    address\n  }: {\n    address: string;\n  }) => Promise<SharesResponse>;\n}\nexport class TransmuterQueryClient implements TransmuterReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.pool = this.pool.bind(this);\n    this.shares = this.shares.bind(this);\n  }\n\n  pool = async (): Promise<PoolResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      pool: {}\n    });\n  };\n  shares = async ({\n    address\n  }: {\n    address: string;\n  }): Promise<SharesResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      shares: {\n        address\n      }\n    });\n  };\n}\nexport interface TransmuterInterface extends TransmuterReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  joinPool: (fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  transmute: ({\n    tokenOutDenom\n  }: {\n    tokenOutDenom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  exitPool: ({\n    tokensOut\n  }: {\n    tokensOut: Coin[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class TransmuterClient extends TransmuterQueryClient implements TransmuterInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.joinPool = this.joinPool.bind(this);\n    this.transmute = this.transmute.bind(this);\n    this.exitPool = this.exitPool.bind(this);\n  }\n\n  joinPool = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      join_pool: {}\n    }, fee, memo, funds);\n  };\n  transmute = async ({\n    tokenOutDenom\n  }: {\n    tokenOutDenom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      transmute: {\n        token_out_denom: tokenOutDenom\n      }\n    }, fee, memo, funds);\n  };\n  exitPool = async ({\n    tokensOut\n  }: {\n    tokensOut: Coin[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      exit_pool: {\n        tokens_out: tokensOut\n      }\n    }, fee, memo, funds);\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport * as _0 from \"./Transmuter.types\";\nimport * as _1 from \"./Transmuter.client\";\nexport namespace contracts {\n  export const Transmuter = { ..._0,\n    ..._1\n  };\n}"],"names":["TransmuterQueryClient","client","contractAddress","_this","this","pool","__awaiter","queryContractSmart","shares","_a","address","bind","TransmuterClient","_super","sender","call","joinPool","fee","memo","funds","execute","join_pool","transmute","tokenOutDenom","token_out_denom","_b","exitPool","tokensOut","exit_pool","tokens_out","__extends","exports","contracts","Transmuter","__assign","_0","_1"],"mappings":";;;;;+hEAkBAA,EAIE,SAAYC,EAAwBC,GAApC,IAKCC,EAAAC,KAEDA,KAAAC,KAAO,WAAA,OAAAC,EAAAH,OAAA,OAAA,GAAA,sCACL,MAAO,CAAA,EAAAC,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DG,KAAM,CAAE,YAGZD,KAAMI,OAAG,SAAOC,GACd,IAAAC,EAAOD,EAAAC,wEAIP,MAAO,CAAA,EAAAN,KAAKH,OAAOM,mBAAmBH,KAAKF,gBAAiB,CAC1DM,OAAQ,CACNE,QAAOA,aAlBXN,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKC,KAAOD,KAAKC,KAAKM,KAAKP,MAC3BA,KAAKI,OAASJ,KAAKI,OAAOG,KAAKP,KAChC,EAkCHQ,EAAA,SAAAC,GAKE,SAAAD,EAAYX,EAA+Ba,EAAgBZ,GAA3D,IAAAC,EACEU,EAAME,KAAAX,KAAAH,EAAQC,IAOfE,YAEDD,EAAAa,SAAW,SAAOC,EAAwCC,EAAeC,eAAvD,IAAAF,IAAAA,EAAsC,iFAC/C,KAAA,EAAA,MAAA,CAAA,EAAMb,KAAKH,OAAOmB,QAAQhB,KAAKU,OAAQV,KAAKF,gBAAiB,CAClEmB,UAAW,CAAE,GACZJ,EAAKC,EAAMC,IAFd,KAAA,EAAA,MAAA,CAAA,EAAOV,kBAITN,EAASmB,UAAG,SAAOb,EAIhBQ,EAAwCC,EAAeC,GAHxD,IAAAI,EAAad,EAAAc,0BAGZ,IAAAN,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMb,KAAKH,OAAOmB,QAAQhB,KAAKU,OAAQV,KAAKF,gBAAiB,CAClEoB,UAAW,CACTE,gBAAiBD,IAElBN,EAAKC,EAAMC,IAJd,KAAA,EAAA,MAAA,CAAA,EAAOM,kBAMTtB,EAAQuB,SAAG,SAAOjB,EAIfQ,EAAwCC,EAAeC,GAHxD,IAAAQ,EAASlB,EAAAkB,sBAGR,IAAAV,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMb,KAAKH,OAAOmB,QAAQhB,KAAKU,OAAQV,KAAKF,gBAAiB,CAClE0B,UAAW,CACTC,WAAYF,IAEbV,EAAKC,EAAMC,IAJd,KAAA,EAAA,MAAA,CAAA,EAAOM,kBA7BPtB,EAAKF,OAASA,EACdE,EAAKW,OAASA,EACdX,EAAKD,gBAAkBA,EACvBC,EAAKa,SAAWb,EAAKa,SAASL,KAAKR,GACnCA,EAAKmB,UAAYnB,EAAKmB,UAAUX,KAAKR,GACrCA,EAAKuB,SAAWvB,EAAKuB,SAASf,KAAKR,IACpC,CA6BH,0PA1CsC2B,CAAqBlB,EAAAC,GA0C1DD,CAAD,CA1CA,CAAsCZ,gFCjDrC+B,EAAAC,eAAA,GAJgBA,EAASA,YAATA,YAIhB,CAAA,IAHcC,WAAkBC,EAAAA,EAAA,CAAA,EAAAC,GAC1BC"}