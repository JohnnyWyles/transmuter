{"version":3,"file":"index.umd.js","sources":["../src/contracts/Transmuter.types.ts","../src/contracts/Transmuter.client.ts","../src/contracts/index.ts"],"sourcesContent":["/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nexport type ExecuteMsg = {\n  join_pool: {\n    [k: string]: unknown;\n  };\n} | {\n  transmute: {\n    token_out_denom: string;\n    [k: string]: unknown;\n  };\n} | {\n  exit_pool: {\n    tokens_out: Coin[];\n    [k: string]: unknown;\n  };\n};\nexport type Uint128 = string;\nexport interface Coin {\n  amount: Uint128;\n  denom: string;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  pool_asset_denoms: string[];\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  pool: {\n    [k: string]: unknown;\n  };\n} | {\n  shares: {\n    address: string;\n    [k: string]: unknown;\n  };\n};\nexport interface AdminResponse {\n  admin?: string | null;\n}\nexport interface PoolResponse {\n  pool: TransmuterPool;\n}\nexport interface TransmuterPool {\n  pool_assets: Coin[];\n}\nexport interface SharesResponse {\n  shares: Uint128;\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { StdFee } from \"@cosmjs/amino\";\nimport { ExecuteMsg, Uint128, Coin, InstantiateMsg, QueryMsg, AdminResponse, PoolResponse, TransmuterPool, SharesResponse } from \"./Transmuter.types\";\nexport interface TransmuterReadOnlyInterface {\n  contractAddress: string;\n  pool: () => Promise<PoolResponse>;\n  shares: ({\n    address\n  }: {\n    address: string;\n  }) => Promise<SharesResponse>;\n}\nexport class TransmuterQueryClient implements TransmuterReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.pool = this.pool.bind(this);\n    this.shares = this.shares.bind(this);\n  }\n\n  pool = async (): Promise<PoolResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      pool: {}\n    });\n  };\n  shares = async ({\n    address\n  }: {\n    address: string;\n  }): Promise<SharesResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      shares: {\n        address\n      }\n    });\n  };\n}\nexport interface TransmuterInterface extends TransmuterReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  joinPool: (fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  transmute: ({\n    tokenOutDenom\n  }: {\n    tokenOutDenom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  exitPool: ({\n    tokensOut\n  }: {\n    tokensOut: Coin[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class TransmuterClient extends TransmuterQueryClient implements TransmuterInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.joinPool = this.joinPool.bind(this);\n    this.transmute = this.transmute.bind(this);\n    this.exitPool = this.exitPool.bind(this);\n  }\n\n  joinPool = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      join_pool: {}\n    }, fee, memo, funds);\n  };\n  transmute = async ({\n    tokenOutDenom\n  }: {\n    tokenOutDenom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      transmute: {\n        token_out_denom: tokenOutDenom\n      }\n    }, fee, memo, funds);\n  };\n  exitPool = async ({\n    tokensOut\n  }: {\n    tokensOut: Coin[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      exit_pool: {\n        tokens_out: tokensOut\n      }\n    }, fee, memo, funds);\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport * as _0 from \"./Transmuter.types\";\nimport * as _1 from \"./Transmuter.client\";\nexport namespace contracts {\n  export const Transmuter = { ..._0,\n    ..._1\n  };\n}"],"names":["contracts"],"mappings":"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"}