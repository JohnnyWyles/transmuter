/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, Coin, Decimal, CalcInAmtGivenOutResponse, CalcOutAmtGivenInResponse, GetSharesResponse, GetSwapFeeResponse, GetTotalPoolLiquidityResponse, GetTotalSharesResponse, IsActiveResponse, SpotPriceResponse } from "./Transmuter.types";
export interface TransmuterReadOnlyInterface {
    contractAddress: string;
    getShares: ({ address }: {
        address: string;
    }) => Promise<GetSharesResponse>;
    getSwapFee: () => Promise<GetSwapFeeResponse>;
    isActive: () => Promise<IsActiveResponse>;
    getTotalShares: () => Promise<GetTotalSharesResponse>;
    getTotalPoolLiquidity: () => Promise<GetTotalPoolLiquidityResponse>;
    spotPrice: ({ baseAssetDenom, quoteAssetDenom }: {
        baseAssetDenom: string;
        quoteAssetDenom: string;
    }) => Promise<SpotPriceResponse>;
    calcOutAmtGivenIn: ({ swapFee, tokenIn, tokenOutDenom }: {
        swapFee: Decimal;
        tokenIn: Coin;
        tokenOutDenom: string;
    }) => Promise<CalcOutAmtGivenInResponse>;
    calcInAmtGivenOut: ({ swapFee, tokenInDenom, tokenOut }: {
        swapFee: Decimal;
        tokenInDenom: string;
        tokenOut: Coin;
    }) => Promise<CalcInAmtGivenOutResponse>;
}
export declare class TransmuterQueryClient implements TransmuterReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getShares: ({ address }: {
        address: string;
    }) => Promise<GetSharesResponse>;
    getSwapFee: () => Promise<GetSwapFeeResponse>;
    isActive: () => Promise<IsActiveResponse>;
    getTotalShares: () => Promise<GetTotalSharesResponse>;
    getTotalPoolLiquidity: () => Promise<GetTotalPoolLiquidityResponse>;
    spotPrice: ({ baseAssetDenom, quoteAssetDenom }: {
        baseAssetDenom: string;
        quoteAssetDenom: string;
    }) => Promise<SpotPriceResponse>;
    calcOutAmtGivenIn: ({ swapFee, tokenIn, tokenOutDenom }: {
        swapFee: Decimal;
        tokenIn: Coin;
        tokenOutDenom: string;
    }) => Promise<CalcOutAmtGivenInResponse>;
    calcInAmtGivenOut: ({ swapFee, tokenInDenom, tokenOut }: {
        swapFee: Decimal;
        tokenInDenom: string;
        tokenOut: Coin;
    }) => Promise<CalcInAmtGivenOutResponse>;
}
export interface TransmuterInterface extends TransmuterReadOnlyInterface {
    contractAddress: string;
    sender: string;
    joinPool: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    exitPool: ({ tokensOut }: {
        tokensOut: Coin[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swapExactAmountIn: ({ tokenIn, tokenOutDenom, tokenOutMinAmount }: {
        tokenIn: Coin;
        tokenOutDenom: string;
        tokenOutMinAmount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swapExactAmountOut: ({ tokenInDenom, tokenInMaxAmount, tokenOut }: {
        tokenInDenom: string;
        tokenInMaxAmount: Uint128;
        tokenOut: Coin;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class TransmuterClient extends TransmuterQueryClient implements TransmuterInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    joinPool: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    exitPool: ({ tokensOut }: {
        tokensOut: Coin[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swapExactAmountIn: ({ tokenIn, tokenOutDenom, tokenOutMinAmount }: {
        tokenIn: Coin;
        tokenOutDenom: string;
        tokenOutMinAmount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    swapExactAmountOut: ({ tokenInDenom, tokenInMaxAmount, tokenOut }: {
        tokenInDenom: string;
        tokenInMaxAmount: Uint128;
        tokenOut: Coin;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Transmuter.client.d.ts.map